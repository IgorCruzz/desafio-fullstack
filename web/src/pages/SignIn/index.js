import React, { useRef } from 'react';
import { Form } from '@unform/web';
import * as Yup from 'yup';
import { Link } from 'react-router-dom';
import api from '../../services/api';
import mail from '../../assets/mail.svg';
import lock from '../../assets/lock.svg';
import paperAirplane from '../../assets/paper-airplane.svg';


import Input from '../../components/Input';
import { useToast } from '../../hooks/Toast';
import { useAuth } from '../../hooks/AuthContext';

import { Container } from '../SignUp/styles';
import { Button } from './styles';

import profitfy_logo from '../../assets/profitfy_logo.svg';
import { useCallback } from 'react';

function SignIn() {
  const { createToast } = useToast();
  const { dispatch } = useAuth();

  const formRef = useRef(null);

  // Form fields validation and api request
  const handleSubmit = useCallback( async (request) =>{

    try {
      // Validating fields using yup schema validation
      const schema = Yup.object().shape({
        email: Yup.string()
                .email('Digite um email válido')
                .required('O email é obrigatório'),
        password: Yup.string().min(6, 'A senha precisa ter pelo menos 6 caracteres').required('A senha é obrigatória'),
      });

      await schema.validate(request, {
        abortEarly: false,
      });

      formRef.current.setErrors({});

    }catch (err) {

      // if the error was generated by yup schema validation
      // is catch this errors and set on unform's form
      if (err instanceof Yup.ValidationError){
        const errorMessages = {}
        err.inner.forEach(error => {
          errorMessages[error.path] = error.message;
        })
        formRef.current.setErrors(errorMessages);
      }

      createToast({
        type: 'info',
        description: 'Verifique os dados preenchidos',
      });

      // If there is some error the function is stopped
      return;
    }

    // Send the login data to api and if it was succeed dispatch the Login action
    // sending the payload received.
    try{
      const { data } = await api.post('/session', request);
      dispatch({
        type: '@LOGIN',
        payload : {
          email: data.data.user.email,
          name: data.data.user.name,
          token: data.data.token.value,
          exp: data.data.token.exp
        }
      });

      createToast({
        type: 'success',
        description: 'Logado com sucesso',
      });
    } catch(e){

      createToast({
        type: 'error',
        description: 'Algo deu errado',
      });
    }

  },[createToast, dispatch]);

  return (
    <Container>
      <div className="wrapper">
        <div className="logo">
          <img src={profitfy_logo} alt="ProfitFy.me logo"/>
        </div>
        <div className="form-wrapper">
          <h4>Informe seus dados para fazer login</h4>
          <Form ref={formRef} className="form-unform" onSubmit={handleSubmit}>
            <Input icon={mail} type="text" placeholder="Email Pessoal" name="email"/>
            <Input icon={lock} type="password" placeholder="Senha" name="password"/>
            <Button className="submit-button" type="submit">
              <img src={paperAirplane} alt="paper airplane icone"/>
              Logar
            </Button>
          </Form>
        </div>
        <div className="bottom-options">
          <Link to="#">Esqueceu sua senha?</Link>
          <Link to="/">Criar conta</Link>
        </div>
      </div>
    </Container>
  );
}

export default SignIn;
